#include <iostream>
using namespace std;
    /*
    delete 연산자
    사용한 메모리를 다시 메모리 폴로 환수
    환수된 메모리는 프로그램의 다른 부분이 다시 사용
    
    - 메모리폴이란 공간을 미리 할당하고, 메모리 할당 요청시(new)
      할당된 공간의 포인터를 반환하는 방법
    */
    /* 
    int* ps = new int;
    //메모리 사용
    delete ps; //ps에 할당된 메모리를 다시 반환하여 다른 프로그램(변수)가 사용하게 함
    
    new 를 사용한 다음에는 반드시 delete 를 사용해야한다.
       그렇지 않는다면 대입은 되었지만 사용하지 않는 값에 대해 누수가
       발생하고 누수의 양이 방대해지면 먹통이 될 가능성이 농후
    */
    /*
    delete 4가지 규칙
    1.new로 대입하지 않은 메모리는 delete로 해제할 수 없다.
    2.같은 메모리 블록을 연달아 두번 delete로 해제할 수 없다.
    3.new[대괄호]로 메모리를 대입할 경우 delete[대괄호]로 해제된다
    4.대괄호를 사용하지않았다면 delete 역시 대괄호 사용 X
    */
int main() {
  double* p3 = new double[3]; //double형의 데이터 3개를 저장할 수 있는 공간을 대입
                             //p3을 배열 이름처럼 취급
  p3[0] = 0.2;
  p3[1] = 0.5;
  p3[2] = 0.8;

  cout << "p3[1] is " << p3[1] << ".\n";

  p3 = p3 + 1; //포인터를 증가 시킨다

  cout << "Now p3[0] is" << p3[0] << "and";
  cout << "p3[1] is" << p3[1] << ".\n";

  p3 = p3 - 1 ;
  delete[] p3; // 다시 시작 위치를 지시
  //cin.get(); // 배열 메모리 해제
  return 0;
}
